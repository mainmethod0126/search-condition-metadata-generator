/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.github.mainmethod0126:app:0.1.1"
  }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

apply plugin: "io.github.mainmethod0126.simple-semantic-version"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'


    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}



publishing {

	String inputUsername = project.findProperty("username") ?: ""
	String inputPassword = project.findProperty("password") ?: ""
    String inputMavenRepoUrl = project.findProperty("url") ?: ""

	if (inputUsername.isEmpty()) {
		if (project.hasProperty('mavenRepoUserId')) {
			inputUsername = "$mavenRepoUserId"
		} else {
			println("Warning : Id for using maven repository is not entered. Enter it using the gradle task parameter or define mavenRepoUserId in ~/.gradle/gradle.properties");
		}
	}

	if (inputPassword.isEmpty()) {
		if (project.hasProperty('mavenRepoUserPassword')) {
			inputPassword = "$mavenRepoUserPassword"
		} else {
			println("Warning : Password for using maven repository is not entered. Enter it using the gradle task parameter or define mavenRepoUserPassword in ~/.gradle/gradle.properties");
		}
	}

    if (inputMavenRepoUrl.isEmpty()) {
		if (project.hasProperty('mavenRepoUrl')) {
			inputMavenRepoUrl = "$mavenRepoUrl"
		} else {
			println("Warning : maven repository url is required but not entered. Enter it using the gradle task parameter or define mavenRepoUrl in ~/.gradle/gradle.properties");
		}
    }

    publications {
        mavenJava(MavenPublication) { 
            from components.java

            groupId = 'io.github.mainmethod0126'
            artifactId = 'search-condition-metadata-generator'

            println("publish infos")
            println("groupId : " + groupId)
            println("artifactId : " + artifactId)
            
            
            pom {
                name = 'search-condition-metadata-generator'
                description = 'This library provides metadata on what searches are possible for domain objects'
            }
        }
    }

    repositories {
        maven{
          credentials {
              username = inputUsername
              password = inputPassword
          }

			    url = inputMavenRepoUrl
        }
    }
}



application {
    // Define the main class for the application.
    mainClass = 'io.github.mainmethod0126.search.condition.metadata.generator.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
